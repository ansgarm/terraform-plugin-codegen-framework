{{define "_builtin/resource_scaffold"}}
var _ resource.Resource = (*{{.CamelName}}Resource)(nil)

func New{{.PascalName}}Resource() resource.Resource {
    return &{{.CamelName}}Resource{}
}

type {{.CamelName}}Resource struct{}

func (r *{{.CamelName}}Resource) Metadata(ctx context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
    resp.TypeName = req.ProviderTypeName + "_{{.SnakeName}}"
}

func (r *{{.CamelName}}Resource) Schema(ctx context.Context, req resource.SchemaRequest, resp *resource.SchemaResponse) {
    resp.Schema = {{.Package}}.{{.SchemaFunc}}(ctx)
}

func (r *{{.CamelName}}Resource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
    var data {{.Package}}.{{.SchemaModelType}}

    resp.Diagnostics.Append(req.Plan.Get(ctx, &data)...)
    if resp.Diagnostics.HasError() {
        return
    }

    resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *{{.CamelName}}Resource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {
    var data {{.Package}}.{{.SchemaModelType}}

    resp.Diagnostics.Append(req.State.Get(ctx, &data)...)
    if resp.Diagnostics.HasError() {
        return
    }

    resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *{{.CamelName}}Resource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {
    var data {{.Package}}.{{.SchemaModelType}}

    resp.Diagnostics.Append(req.Plan.Get(ctx, &data)...)
    if resp.Diagnostics.HasError() {
        return
    }

    resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *{{.CamelName}}Resource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {
    var data {{.Package}}.{{.SchemaModelType}}

    resp.Diagnostics.Append(req.State.Get(ctx, &data)...)
    if resp.Diagnostics.HasError() {
        return
    }
}
{{end}}